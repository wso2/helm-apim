[server]
hostname = "{{ .Values.kubernetes.ingress.controlPlane.hostname }}"
node_ip = "$env{NODE_IP}"
offset = {{ .Values.wso2.apim.portOffset }}
base_path = "${carbon.protocol}://${carbon.host}:${carbon.management.port}"
#discard_empty_caches = false
server_role = "default"

[user_store]
type = {{ .Values.wso2.apim.configurations.userStore.type | quote }}
{{- range $key, $value := .Values.wso2.apim.configurations.userStore.properties }}
{{ $key }} = {{ $value | quote }}
{{- end }}

[super_admin]
username = {{ .Values.wso2.apim.configurations.adminUsername | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{admin_password}"
{{- else if and .Values.wso2.apim.configurations.existingSecret.secretName .Values.wso2.apim.configurations.existingSecret.adminPasswordKey }}
password = "${env:WSO2_ADMIN_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
{{- end }}
create_admin_account = true

[database.apim_db]
type = "{{ .Values.wso2.apim.configurations.databases.type }}"
url = "{{ .Values.wso2.apim.configurations.databases.apim_db.url }}"
username = "{{ .Values.wso2.apim.configurations.databases.apim_db.username }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{apim_db_password}"
{{- else if and .Values.wso2.apim.configurations.existingSecret.secretName .Values.wso2.apim.configurations.existingSecret.apimDBPasswordKey }}
password = "${env:WSO2_APIM_DB_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.databases.apim_db.password | quote }}
{{- end }}
driver = "{{ .Values.wso2.apim.configurations.databases.jdbc.driver }}"

[database.apim_db.pool_options]
{{- range $key, $value := .Values.wso2.apim.configurations.databases.apim_db.poolParameters }}
{{ $key }} = "{{ $value }}"
{{- end }}

[database.shared_db]
type = "{{ .Values.wso2.apim.configurations.databases.type }}"
url = "{{ .Values.wso2.apim.configurations.databases.shared_db.url }}"
username = "{{ .Values.wso2.apim.configurations.databases.shared_db.username }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{shared_db_password}"
{{- else if and .Values.wso2.apim.configurations.existingSecret.secretName .Values.wso2.apim.configurations.existingSecret.sharedDBPasswordKey }}
password = "${env:WSO2_SHARED_DB_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.databases.shared_db.password | quote }}
{{- end }}
driver = "{{ .Values.wso2.apim.configurations.databases.jdbc.driver }}"

[database.shared_db.pool_options]
{{- range $key, $value := .Values.wso2.apim.configurations.databases.shared_db.poolParameters }}
{{ $key }} = "{{ $value }}"
{{- end }}

[apim]
gateway_type = "{{ .Values.wso2.apim.configurations.gatewayType }}"

{{- if .Values.wso2.apim.configurations.security.keystores.primary.enabled }}
[keystore.primary]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.keystores.primary.name }}"
alias = "{{ .Values.wso2.apim.configurations.security.keystores.primary.alias }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{keystore_password}"
key_password = "$secret{keystore_key_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.primaryKeystorePasswordKey }}
password = "${env:WSO2_PRIMARY_KEYSTORE_PASSWORD}"
key_password = "${env:WSO2_PRIMARY_KEYSTORE_KEY_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
{{- end }}
{{- end }}

{{- if .Values.wso2.apim.configurations.security.keystores.tls.enabled }}
[keystore.tls]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.keystores.tls.name }}"
alias = "{{ .Values.wso2.apim.configurations.security.keystores.tls.alias }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{ssl_keystore_password}"
key_password = "$secret{ssl_key_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.tlsKeystorePasswordKey }}
password = "${env:WSO2_TLS_KEYSTORE_PASSWORD}"
key_password = "${env:WSO2_TLS_KEYSTORE_KEY_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
{{- end }}
{{- end }}

{{- if .Values.wso2.apim.configurations.security.keystores.internal.enabled }}
[keystore.internal]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.keystores.internal.name }}"
alias = "{{ .Values.wso2.apim.configurations.security.keystores.internal.alias }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{internal_keystore_password}"
key_password = "$secret{internal_keystore_key_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.internalKeystorePasswordKey }}
password = "${env:WSO2_INTERNAL_KEYSTORE_PASSWORD}"
key_password = "${env:WSO2_INTERNAL_KEYSTORE_KEY_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
{{- end }}
{{- end }}

[truststore]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.truststore.name }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{truststore_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.truststorePasswordKey }}
password = "${env:WSO2_TRUSTSTORE_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
{{- end }}

{{- range $i, $env := .Values.wso2.apim.configurations.gateway.environments }}
[[apim.gateway.environment]]
name = {{ $env.name | quote }}
type = {{ $env.type | quote }}
gateway_type = {{ $env.gatewayType | quote }}
provider = {{ $env.provider | quote }}
{{- if $env.visibility }}
visibility = {{ toJson $env.visibility }}
{{- end}}
display_in_api_console = {{ $env.displayInApiConsole }}
description = {{ $env.description | quote }}
show_as_token_endpoint_url = {{ $env.showAsTokenEndpointUrl }}
service_url = "https://{{ $env.serviceName }}:{{ $env.servicePort }}/services/"
username= "${admin.username}"
password= "${admin.password}"
ws_endpoint = "ws://{{ $env.wsHostname }}"
wss_endpoint = "wss://{{ $env.wsHostname }}"
http_endpoint = "http://{{ $env.httpHostname }}"
https_endpoint = "https://{{ $env.httpHostname }}"
websub_event_receiver_http_endpoint = "http://{{ $env.websubHostname }}"
websub_event_receiver_https_endpoint = "https://{{ $env.websubHostname }}"

{{- end }}

[apim.key_manager]
{{- if .Values.wso2.apim.configurations.iskm.enabled }}
type = "WSO2-IS"
service_url = "https://{{ .Values.wso2.apim.configurations.iskm.serviceName }}:{{ .Values.wso2.apim.configurations.iskm.servicePort }}/services/"
{{- else if .Values.wso2.apim.configurations.km.enabled }}
service_url = "https://{{ .Values.wso2.apim.configurations.km.serviceName }}:{{ .Values.wso2.apim.configurations.km.servicePort }}/services/"
{{- else }}
service_url = "https://{{ template "apim-helm-cp.fullname" . }}-service:{{ add 9443 .Values.wso2.apim.portOffset }}/services/"
{{- end }}
username= "$ref{super_admin.username}"
password= "$ref{super_admin.password}"
{{- if .Values.wso2.apim.configurations.keyManager.enableLightweightAPIKeyGeneration }}
enable_lightweight_apikey_generation = true
{{- else }}
enable_lightweight_apikey_generation = false
{{- end }}
{{- if .Values.wso2.apim.configurations.keyManager.allowSubscriptionValidationDisabling }}
allow_subscription_validation_disabling = true
{{- else }}
allow_subscription_validation_disabling = false
{{- end }}

{{ if .Values.wso2.apim.configurations.iskm.enabled }}
[oauth.grant_type.token_exchange]
enable = false
allow_refresh_tokens = true
iat_validity_period = "1h"
{{- end }}

[oauth.endpoints]
{{- if .Values.wso2.apim.configurations.oauth_config }}
oauth2_jwks_url = "{{ .Values.wso2.apim.configurations.oauth_config.oauth2JWKSUrl }}"
{{- end }}

[apim.publisher]
enable_api_doc_visibility = {{ .Values.wso2.apim.configurations.publisher.enable_api_doc_visibility }}
{{- if .Values.wso2.apim.configurations.publisher.supportedDocumentTypes }}
supported_document_types = {{ toJson .Values.wso2.apim.configurations.publisher.supportedDocumentTypes }}
{{- end }}
{{- if .Values.wso2.apim.configurations.publisher.enablePortalConfigurationOnlyMode }}
enable_portal_configuration_only_mode = {{ .Values.wso2.apim.configurations.publisher.enablePortalConfigurationOnlyMode }}
{{- end }}
{{- if .Values.wso2.apim.configurations.publisher.internalKeyIssuer }}
internal_key_issuer = "{{ .Values.wso2.apim.configurations.publisher.internalKeyIssuer }}"
{{- end }}

[apim.devportal]
url = "https://{{ .Values.kubernetes.ingress.controlPlane.hostname }}/devportal"
mode = {{ .Values.wso2.apim.configurations.devportal.mode | quote }}
{{- if .Values.wso2.apim.configurations.devportal.enableApplicationSharing }}
enable_application_sharing = {{ .Values.wso2.apim.configurations.devportal.enableApplicationSharing }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.applicationSharingType }}
application_sharing_type = {{ .Values.wso2.apim.configurations.devportal.applicationSharingType | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.applicationSharingImpl }}
application_sharing_impl = {{ .Values.wso2.apim.configurations.devportal.applicationSharingImpl | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.displayMultipleVersions }}
display_multiple_versions = {{ .Values.wso2.apim.configurations.devportal.displayMultipleVersions }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.displayDeprecatedAPIs }}
display_deprecated_apis = {{ .Values.wso2.apim.configurations.devportal.displayDeprecatedAPIs }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableComments }}
enable_comments = {{ .Values.wso2.apim.configurations.devportal.enableComments }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableRatings }}
enable_ratings = {{ .Values.wso2.apim.configurations.devportal.enableRatings }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableForum }}
enable_forum = {{ .Values.wso2.apim.configurations.devportal.enableForum }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableAnonymousMode }}
enable_anonymous_mode = {{ .Values.wso2.apim.configurations.devportal.enableAnonymousMode }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableCrossTenantSubscriptions }}
enable_cross_tenant_subscriptions = {{ .Values.wso2.apim.configurations.devportal.enableCrossTenantSubscriptions }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.defaultReservedUsername }}
default_reserved_username = {{ .Values.wso2.apim.configurations.devportal.defaultReservedUsername | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.loginUsernameCaseInsensitive }}
login_username_case_insensitive = {{ .Values.wso2.apim.configurations.devportal.loginUsernameCaseInsensitive }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableKeyProvisioning }}
enable_key_provisioning = {{ .Values.wso2.apim.configurations.devportal.enableKeyProvisioning }}
{{- end }}

[apim.event_hub]
enable = true
username = "$ref{super_admin.username}"
password = "$ref{super_admin.password}"
service_url = "https://{{ template "apim-helm-cp.fullname" . }}-service:{{ add 9443 .Values.wso2.apim.portOffset }}/services/"
event_listening_endpoints = ["tcp://localhost:{{ add 5672 .Values.wso2.apim.portOffset }}"]
{{- if .Values.wso2.deployment.highAvailability }}
event_duplicate_url = ["tcp://{{ template "apim-helm-cp.fullname" . }}-2-service:{{ add 5672 .Values.wso2.apim.portOffset }}"]
{{- end }}

[[apim.event_hub.publish.url_group]]
urls = ["tcp://{{ template "apim-helm-cp.fullname" . }}-1-service:{{ add 9611 .Values.wso2.apim.portOffset }}"]
auth_urls = ["ssl://{{ template "apim-helm-cp.fullname" . }}-1-service:{{ add 9711 .Values.wso2.apim.portOffset }}"]

{{- if .Values.wso2.deployment.highAvailability }}
[[apim.event_hub.publish.url_group]]
urls = ["tcp://{{ template "apim-helm-cp.fullname" . }}-2-service:{{ add 9611 .Values.wso2.apim.portOffset }}"]
auth_urls = ["ssl://{{ template "apim-helm-cp.fullname" . }}-2-service:{{ add 9711 .Values.wso2.apim.portOffset }}"]
{{- end }}

[apim.oauth_config]
{{- if .Values.wso2.apim.configurations.iskm.enabled }}
revoke_endpoint = "https://{{ .Values.wso2.apim.configurations.iskm.serviceName }}:{{ .Values.wso2.apim.configurations.iskm.servicePort }}/oauth2/revoke"
{{- else }}
revoke_endpoint = "https://{{ template "apim-helm-cp.fullname" . }}-service:{{ add 9443 .Values.wso2.apim.portOffset }}/oauth2/revoke"
{{- end }}
enable_token_encryption = {{ .Values.wso2.apim.configurations.oauth_config.enableTokenEncryption }}
enable_token_hashing = {{ .Values.wso2.apim.configurations.oauth_config.enableTokenHashing }}
allowed_scopes = {{ toJson .Values.wso2.apim.configurations.oauth_config.allowedScopes }}

{{- if .Values.wso2.apim.configurations.openTracer.enabled }}
[apim.open_tracer]
remote_tracer.enable = {{ .Values.wso2.apim.configurations.openTracer.enabled }}
remote_tracer.name = {{ .Values.wso2.apim.configurations.openTracer.name | quote }}
remote_tracer.properties.hostname = {{ .Values.wso2.apim.configurations.openTracer.properties.hostname | quote }}
remote_tracer.properties.port = {{ .Values.wso2.apim.configurations.openTracer.properties.port | quote }}
{{- end }}

{{- if .Values.wso2.apim.configurations.openTelemetry.enabled }}
[apim.open_telemetry]
remote_tracer.enable = {{ .Values.wso2.apim.configurations.openTelemetry.enabled }}
remote_tracer.name = {{ .Values.wso2.apim.configurations.openTelemetry.name | quote }}
remote_tracer.hostname = {{ .Values.wso2.apim.configurations.openTelemetry.hostname | quote }}
remote_tracer.port = {{ .Values.wso2.apim.configurations.openTelemetry.port | quote }}
{{- end }}

[apim.ai]
{{- if .Values.wso2.apim.configurations.ai.enabled }}
enable = true
token = {{ .Values.wso2.apim.configurations.ai.token | quote }}
endpoint = {{ .Values.wso2.apim.configurations.ai.endpoint | quote }}
token_endpoint = {{ .Values.wso2.apim.configurations.ai.tokenEndpoint | quote }}
key = {{ .Values.wso2.apim.configurations.ai.key | quote }}
{{- else }}
enable = false
{{- end }}

{{- if .Values.wso2.apim.configurations.ai.embeddingProvider.type }}
[apim.ai.embedding_provider]
type = "{{ .Values.wso2.apim.configurations.ai.embeddingProvider.type }}"
[apim.ai.embedding_provider.properties]
apikey = "{{ .Values.wso2.apim.configurations.ai.embeddingProvider.properties.apikey }}"
embedding_endpoint = "{{ .Values.wso2.apim.configurations.ai.embeddingProvider.properties.embeddingEndpoint }}"
embedding_model = "{{ .Values.wso2.apim.configurations.ai.embeddingProvider.properties.embeddingModel }}"
{{- end }}

{{- if .Values.wso2.apim.configurations.ai.vectorDbProvider.type }}
[apim.ai.vector_db_provider]
type = "{{ .Values.wso2.apim.configurations.ai.vectorDbProvider.type }}"
[apim.ai.vector_db_provider.properties]
uri = "{{ .Values.wso2.apim.configurations.ai.vectorDbProvider.properties.uri }}"
token = "{{ .Values.wso2.apim.configurations.ai.vectorDbProvider.properties.token }}"
{{- end }}

{{- if .Values.wso2.apim.configurations.mcp.enabled }}
[apim.mcp]
enable = true
{{- end }}

[transport.https.properties]
proxyPort = 443

[[event_handler]]
name="userPostSelfRegistration"
subscriptions=["POST_ADD_USER"]

[service_provider]
sp_name_regex = "^[\\sa-zA-Z0-9._-]*$"

{{- if not .Values.wso2.apim.configurations.iskm.enabled }}
[[event_listener]]
id = "token_revocation"
type = "org.wso2.carbon.identity.core.handler.AbstractIdentityHandler"
name = "org.wso2.is.notification.ApimOauthEventInterceptor"
order = 1

[event_listener.properties]
notification_endpoint = "https://localhost:${mgt.transport.https.port}/internal/data/v1/notify"
username = "${admin.username}"
password = "${admin.password}"
'header.X-WSO2-KEY-MANAGER' = "default"
{{- end }}

{{- if .Values.wso2.deployment.persistence.solrIndexing.enabled }}
[database.local]
url = "jdbc:h2:/home/wso2carbon/solr/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE"

[indexing]
location = "/home/wso2carbon/solr/indexed-data"
{{- else }}
[database.local]
url = "jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE"
{{- end }}

{{- if .Values.wso2.apim.secureVaultEnabled }}
[secrets]
admin_password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
ssl_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
ssl_key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
internal_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
internal_keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
truststore_password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
apim_db_password = {{ .Values.wso2.apim.configurations.databases.apim_db.password | quote}}
shared_db_password = {{ .Values.wso2.apim.configurations.databases.shared_db.password | quote}}
{{- end}}

{{- if eq (include "scheduler.isEmpty" .) "false" }}
[apim.governance.scheduler]
thread_pool_size = "{{ .Values.wso2.apim.configurations.governance.scheduler.thread_pool_size }}"
queue_size = "{{ .Values.wso2.apim.configurations.governance.scheduler.queue_size }}"
task_check_interval_minutes = "{{ .Values.wso2.apim.configurations.governance.scheduler.task_check_interval_minutes }}"
task_cleanup_interval_minutes = "{{ .Values.wso2.apim.configurations.governance.scheduler.task_cleanup_interval_minutes }}"
{{- else }}
# At least one scheduler value is not empty
{{- end }}

{{- if .Values.wso2.apim.configurations.sdk }}
[apim.sdk]
{{- if .Values.wso2.apim.configurations.sdk.supportedLanguages }}
supported_languages = {{ toJson .Values.wso2.apim.configurations.sdk.supportedLanguages }}
{{- end }}
{{- end }}

[apim.transaction_counter]
{{- if .Values.wso2.apim.configurations.transactionCounter.enabled }}
enable = true
server_url = "{{ .Values.wso2.apim.configurations.transactionCounter.serverUrl }}"
{{- else }}
enable = false
{{- end }}

[apim.organization_based_access_control]
enable = {{ .Values.wso2.apim.configurations.organization_based_access_control.enabled }}
organization_name_local_claim = {{ .Values.wso2.apim.configurations.organization_based_access_control.organization_name_local_claim | quote }}
organization_id_local_claim = {{ .Values.wso2.apim.configurations.organization_based_access_control.organization_id_local_claim | quote }}

{{- if .Values.wso2.apim.configurations.distributedThrottling.enable }}
[apim.distributed_throttling]
enable = true
type = "{{ .Values.wso2.apim.configurations.distributedThrottling.type }}"
sync_interval = {{ .Values.wso2.apim.configurations.distributedThrottling.syncInterval }}
core_pool_size = {{ .Values.wso2.apim.configurations.distributedThrottling.corePoolSize }}

[apim.distributed_throttling.keyvalue_store]
host = "{{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.host }}"
port = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.port }}
user = "{{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.user }}"
password = "{{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.password }}"
maxTotal = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.maxTotal }}
maxIdle = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.maxIdle }}
minIdle = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.minIdle }}
block_when_exhausted = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.blockWhenExhausted }}
test_while_idle = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.testWhileIdle }}
min_evictable_idle_time_millis = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.minEvictableIdleTimeMillis }}
time_between_eviction_runs_millis = {{ .Values.wso2.apim.configurations.distributedThrottling.keyvalueStore.timeBetweenEvictionRunsMillis }}
{{- end }}

[apim.gateway_notification.cleanup]
expiry_time = {{ .Values.wso2.apim.configurations.gatewayNotification.cleanUp.expiryTime | quote }}
data_retention_period = {{ .Values.wso2.apim.configurations.gatewayNotification.cleanUp.dataRetentionPeriod | quote }}

{{- if .Values.wso2.apim.configurations.tenantSharing.enabled }}
[[apim.tenant_sharing]]
type = {{ .Values.wso2.apim.configurations.tenantSharing.type | quote }}
[apim.tenant_sharing.properties]
enable_tenant_sync = {{ .Values.wso2.apim.configurations.tenantSharing.properties.enableTenantSync }}
auto_configure_key_manager = {{ .Values.wso2.apim.configurations.tenantSharing.properties.autoConfigureKeyManager }}
username = {{ .Values.wso2.apim.configurations.tenantSharing.properties.username | quote }}
password = {{ .Values.wso2.apim.configurations.tenantSharing.properties.password | quote }}
identity_server_base_url = {{ .Values.wso2.apim.configurations.tenantSharing.properties.identityServerBaseUrl | quote }}
{{- end }}

{{- if .Values.wso2.apim.configurations.extraConfigs }}
{{ .Values.wso2.apim.configurations.extraConfigs }}
{{- end }}
