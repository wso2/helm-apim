[server]
hostname = "{{ .Values.kubernetes.ingress.gateway.hostname }}"
node_ip = "$env{NODE_IP}"
server_role = "gateway-worker"
offset = {{ .Values.wso2.apim.portOffset }}

[user_store]
type = {{ .Values.wso2.apim.configurations.userStore.type | quote }}
{{- range $key, $value := .Values.wso2.apim.configurations.userStore.properties }}
{{ $key }} = {{ $value | quote }}
{{- end }}

[super_admin]
username = {{ .Values.wso2.apim.configurations.adminUsername | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{admin_password}"
{{- else if and .Values.wso2.apim.configurations.existingSecret.secretName .Values.wso2.apim.configurations.existingSecret.adminPasswordKey }}
password = "${env:WSO2_ADMIN_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
{{- end }}
create_admin_account = true

[database.shared_db]
type = "{{ .Values.wso2.apim.configurations.databases.type }}"
url = "{{ .Values.wso2.apim.configurations.databases.shared_db.url }}"
username = "{{ .Values.wso2.apim.configurations.databases.shared_db.username }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{shared_db_password}"
{{- else if and .Values.wso2.apim.configurations.existingSecret.secretName .Values.wso2.apim.configurations.existingSecret.sharedDBPasswordKey }}
password = "${env:WSO2_SHARED_DB_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.databases.shared_db.password | quote }}
{{- end }}
driver = "{{ .Values.wso2.apim.configurations.databases.jdbc.driver }}"

[database.shared_db.pool_options]
{{- range $key, $value := .Values.wso2.apim.configurations.databases.shared_db.poolParameters }}
{{ $key }} = "{{ $value }}"
{{- end }}

{{- if .Values.wso2.apim.configurations.security.keystores.primary.enabled }}
[keystore.primary]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.keystores.primary.name }}"
alias = "{{ .Values.wso2.apim.configurations.security.keystores.primary.alias }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{keystore_password}"
key_password = "$secret{keystore_key_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.primaryKeystorePasswordKey }}
password = "${env:WSO2_PRIMARY_KEYSTORE_PASSWORD}"
key_password = "${env:WSO2_PRIMARY_KEYSTORE_KEY_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
{{- end }}
{{- end }}

{{- if .Values.wso2.apim.configurations.security.keystores.tls.enabled }}
[keystore.tls]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.keystores.tls.name }}"
alias = "{{ .Values.wso2.apim.configurations.security.keystores.tls.alias }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{ssl_keystore_password}"
key_password = "$secret{ssl_key_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.tlsKeystorePasswordKey }}
password = "${env:WSO2_TLS_KEYSTORE_PASSWORD}"
key_password = "${env:WSO2_TLS_KEYSTORE_KEY_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
{{- end }}
{{- end }}

{{- if .Values.wso2.apim.configurations.security.keystores.internal.enabled }}
[keystore.internal]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.keystores.internal.name }}"
alias = "{{ .Values.wso2.apim.configurations.security.keystores.internal.alias }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{internal_keystore_password}"
key_password = "$secret{internal_keystore_key_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.internalKeystorePasswordKey }}
password = "${env:WSO2_INTERNAL_KEYSTORE_PASSWORD}"
key_password = "${env:WSO2_INTERNAL_KEYSTORE_KEY_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
{{- end }}
{{- end }}

[truststore]
type = "JKS"
file_name = "{{ .Values.wso2.apim.configurations.security.truststore.name }}"
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{truststore_password}"
{{- else if and .Values.wso2.apim.configurations.security.jksExistingSecret.secretName .Values.wso2.apim.configurations.security.jksExistingSecret.truststorePasswordKey }}
password = "${env:WSO2_TRUSTSTORE_PASSWORD}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
{{- end }}

[apim.ai]
{{- if .Values.wso2.apim.configurations.ai.enabled }}
enable = true
token = {{ .Values.wso2.apim.configurations.ai.token | quote }}
endpoint = {{ .Values.wso2.apim.configurations.ai.endpoint | quote }}
{{- else }}
enable = false
{{- end }}

[transport.http]
properties.port = 9763
properties.proxyPort = 80

[transport.https]
properties.port = 9443
properties.proxyPort = 443

# key manager implementation
[apim.key_manager]
{{- if .Values.wso2.apim.configurations.iskm.enabled }}
type = "WSO2-IS"
service_url = "https://{{ .Values.wso2.apim.configurations.iskm.serviceName }}:{{ .Values.wso2.apim.configurations.iskm.servicePort }}/services/"
{{- else }}
service_url = "https://{{ .Values.wso2.apim.configurations.km.serviceUrl }}:{{ .Values.wso2.apim.configurations.km.servicePort }}/services/"
{{- end }}
username= "$ref{super_admin.username}"
password= "$ref{super_admin.password}"

[apim.transaction_counter]
{{- if .Values.wso2.apim.configurations.transactionCounter.enabled }}
enable = true
server_url = "{{ .Values.wso2.apim.configurations.transactionCounter.serverUrl }}"
{{- else }}
enable = false
{{- end }}
server_id = "{{ .Values.wso2.apim.configurations.transactionCounter.serverId }}"

{{- if .Values.wso2.apim.configurations.iskm.enabled }}
[oauth.grant_type.token_exchange]
enable = false
allow_refresh_tokens = true
iat_validity_period = "1h"
{{- end }}

# JWT Generation
{{- if .Values.wso2.apim.configurations.jwt.enabled }}
[apim.jwt]
enable = {{ .Values.wso2.apim.configurations.jwt.enabled }}
encoding = {{ .Values.wso2.apim.configurations.jwt.encoding | quote }} # base64,base64url
generator_impl = {{ .Values.wso2.apim.configurations.jwt.generatorImpl | quote }}
claim_dialect = {{ .Values.wso2.apim.configurations.jwt.claimDialect | quote }}
header = {{ .Values.wso2.apim.configurations.jwt.header | quote }}
signing_algorithm = {{ .Values.wso2.apim.configurations.jwt.signingAlgorithm | quote }}
enable_user_claims = {{ .Values.wso2.apim.configurations.jwt.enableUserClaims }}
claims_extractor_impl = {{ .Values.wso2.apim.configurations.jwt.claimsExtractorImpl | quote }}
{{- end }}

[apim.sync_runtime_artifacts.gateway]
gateway_labels = {{ toJson .Values.wso2.apim.configurations.syncRuntimeArtifacts.gateway.labels }}

{{- if .Values.wso2.apim.configurations.syncRuntimeArtifacts.tenantLoading.enabled }}
[apim.sync_runtime_artifacts.tenant_loading]
enable = true
tenants = {{ .Values.wso2.apim.configurations.syncRuntimeArtifacts.tenantLoading.tenants | quote }}
{{- end }}

# Traffic Manager configurations
[apim.throttling]
username= "$ref{super_admin.username}"
password= "$ref{super_admin.password}"
service_url = "https://{{ .Values.wso2.apim.configurations.throttling.serviceUrl }}:{{ .Values.wso2.apim.configurations.throttling.servicePort }}/services/"
{{- $len := add (len .Values.wso2.apim.configurations.throttling.urls) -1 }}
throttle_decision_endpoints = [{{ range $index, $element := .Values.wso2.apim.configurations.throttling.urls }}"tcp://{{ $element }}:{{ add 5672 $.Values.wso2.apim.configurations.throttling.portOffset }}"{{ if ne $index $len }},{{ end }}{{ end}}]
enable_unlimited_tier = {{ .Values.wso2.apim.configurations.throttling.unlimitedTier }}
enable_header_based_throttling = {{ .Values.wso2.apim.configurations.throttling.headerBasedThrottling }}
enable_jwt_claim_based_throttling = {{ .Values.wso2.apim.configurations.throttling.jwtClaimBasedThrottling }}
enable_query_param_based_throttling = {{ .Values.wso2.apim.configurations.throttling.queryParamBasedThrottling }}

{{- if .Values.wso2.apim.configurations.distributedThrottling.enable }}
[[apim.throttling.url_group]]
{{- $len := add (len .Values.wso2.apim.configurations.throttling.urls) -1 }}
traffic_manager_urls = [{{ range $index, $element := .Values.wso2.apim.configurations.throttling.urls }}"tcp://{{ $element }}:{{ add 9611 $.Values.wso2.apim.configurations.throttling.portOffset }}"{{ if ne $index $len }},{{ end }}{{ end}}]
{{- $len := add (len .Values.wso2.apim.configurations.throttling.urls) -1 }}
traffic_manager_auth_urls = [{{ range $index, $element := .Values.wso2.apim.configurations.throttling.urls }}"ssl://{{ $element }}:{{ add 9711 $.Values.wso2.apim.configurations.throttling.portOffset }}"{{ if ne $index $len }},{{ end }}{{ end}}]
type = "loadbalance"
{{- else }}
{{ range $index, $url := .Values.wso2.apim.configurations.throttling.urls }}
[[apim.throttling.url_group]]
traffic_manager_urls = ["tcp://{{ $url }}:{{ add 9611 $.Values.wso2.apim.configurations.throttling.portOffset }}"]
traffic_manager_auth_urls = ["ssl://{{ $url }}:{{ add 9711 $.Values.wso2.apim.configurations.throttling.portOffset }}"]
type = "loadbalance"
{{- end }}
{{- end }}

{{- if .Values.wso2.apim.configurations.eventhub.enabled }}
[apim.event_hub]
enable = true
username = "$ref{super_admin.username}"
password = "$ref{super_admin.password}"
service_url = "https://{{ .Values.wso2.apim.configurations.eventhub.serviceUrl }}:{{ .Values.wso2.apim.configurations.eventhub.servicePort }}/services/"
{{- $len := add (len .Values.wso2.apim.configurations.eventhub.urls) -1 }}
event_listening_endpoints = [{{ range $index, $element := .Values.wso2.apim.configurations.eventhub.urls }}"tcp://{{ $element }}:{{ add 5672 $.Values.wso2.apim.configurations.throttling.portOffset }}"{{ if ne $index $len }},{{ end }}{{ end}}]
{{- end }}

[apim.analytics]
{{- if .Values.wso2.choreoAnalytics.enabled }}
enable = true
config_endpoint = "{{ .Values.wso2.choreoAnalytics.endpoint }}"
auth_token = "{{ .Values.wso2.choreoAnalytics.onpremKey }}"
{{- else if .Values.wso2.ELKAnalytics.enabled}}
enable = true
type = "elk"
{{- else if .Values.wso2.moesifAnalytics.enabled }}
enable = true
type = "moesif"
properties."moesifKey" = {{ .Values.wso2.moesifAnalytics.key | quote }}
properties."publisher.reporter.class" = {{ .Values.wso2.moesifAnalytics.publisherReporterClass | quote }}
logger.reporter.level = {{ .Values.wso2.moesifAnalytics.loggerReporterLevel | quote }}
{{- else }}
enable = false
{{- end }}

# Caches
[apim.cache.gateway_token]
enable = {{ .Values.wso2.apim.configurations.cache.gateway_token.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.gateway_token.expiryTime }}

[apim.cache.resource]
enable = {{ .Values.wso2.apim.configurations.cache.resource.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.resource.expiryTime }}

[apim.cache.jwt_claim]
enable = {{ .Values.wso2.apim.configurations.cache.jwt_claim.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.jwt_claim.expiryTime }}

[apim.oauth_config]
remove_outbound_auth_header = {{ .Values.wso2.apim.configurations.oauth_config.removeOutboundAuthHeader }}
auth_header = {{ .Values.wso2.apim.configurations.oauth_config.authHeader | quote }}
enable_token_encryption = {{ .Values.wso2.apim.configurations.oauth_config.enableTokenEncryption }}
enable_token_hashing = {{ .Values.wso2.apim.configurations.oauth_config.enableTokenHashing }}

[apim.cors]
enable = {{ .Values.wso2.apim.configurations.cors.enabled }}
allow_origins = {{ toJson .Values.wso2.apim.configurations.cors.allowOrigins }}
allow_methods = {{ toJson .Values.wso2.apim.configurations.cors.allowMethods }}
allow_headers = {{ toJson .Values.wso2.apim.configurations.cors.allowHeaders }}
allow_credentials = {{ .Values.wso2.apim.configurations.cors.allowCredentials }}
enable_validation_for_ws = {{ .Values.wso2.apim.configurations.cors.enableForWS }}

{{- if .Values.wso2.apim.configurations.openTracer.enabled }}
[apim.open_tracer]
remote_tracer.enable = {{ .Values.wso2.apim.configurations.openTracer.enabled }}
remote_tracer.name = {{ .Values.wso2.apim.configurations.openTracer.name | quote }}
remote_tracer.properties.hostname = {{ .Values.wso2.apim.configurations.openTracer.properties.hostname | quote }}
remote_tracer.properties.port = {{ .Values.wso2.apim.configurations.openTracer.properties.port | quote }}
{{- end }}

{{- if .Values.wso2.apim.configurations.openTelemetry.enabled }}
[apim.open_telemetry]
remote_tracer.enable = {{ .Values.wso2.apim.configurations.openTelemetry.enabled }}
remote_tracer.name = {{ .Values.wso2.apim.configurations.openTelemetry.name | quote }}
remote_tracer.hostname = {{ .Values.wso2.apim.configurations.openTelemetry.hostname | quote }}
remote_tracer.port = {{ .Values.wso2.apim.configurations.openTelemetry.port | quote }}
{{- end }}

[transport.passthru_https.sender.parameters]
HostnameVerifier = {{ .Values.wso2.apim.configurations.transport.passthru_https.sender.parameters.hostnameVerifier | quote }}

{{- if .Values.wso2.apim.secureVaultEnabled }}
[secrets]
admin_password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
ssl_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
ssl_key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
internal_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
internal_keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
truststore_password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
shared_db_password = {{ .Values.wso2.apim.configurations.databases.shared_db.password | quote}}
{{- end}}

[apim.gateway_notification]
enabled = {{ .Values.wso2.apim.configurations.gatewayNotification.enabled }}
gateway_id = {{ .Values.wso2.apim.configurations.gatewayNotification.gatewayId | quote }}

[apim.gateway_notification.heartbeat]
notify_interval = {{ .Values.wso2.apim.configurations.gatewayNotification.heartbeat.notifyInterval | quote }}

[apim.gateway_notification.deployment_ack]
batch_size = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.batchSize }}
batch_interval = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.batchInterval | quote }}
max_retry_count = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.maxRetryCount }}
retry_duration = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.retryDuration | quote }}
retry_progression_factor = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.retryProgressionFactor }}
batch_processor_min_thread = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.batchProcessorMinThread }}
batch_processor_max_thread = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.batchProcessorMaxThread }}
batch_processor_keep_alive = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.batchProcessorKeepAlive | quote }}
batch_processor_queue_size = {{ .Values.wso2.apim.configurations.gatewayNotification.deploymentAck.batchProcessorQueueSize }}

[apim.gateway_notification.registration]
max_retry_count = {{ .Values.wso2.apim.configurations.gatewayNotification.registration.maxRetryCount }}
retry_duration = {{ .Values.wso2.apim.configurations.gatewayNotification.registration.retryDuration | quote }}
retry_progression_factor = {{ .Values.wso2.apim.configurations.gatewayNotification.registration.retryProgressionFactor }}

{{- if .Values.wso2.apim.configurations.extraConfigs }}
{{ .Values.wso2.apim.configurations.extraConfigs }}
{{- end }}
